#!/usr/bin/env node
import m from"path";import o from"fs-extra";import h from"knex";import d from"camelcase";process.stdout.write(process.platform==="win32"?"\x1B[2J\x1B[0f":"\x1B[2J\x1B[3J\x1B[H");const t=o.readJSONSync(m.join(process.cwd(),"mysql-adonis-schema.json"));t.folder&&t.folder!==""&&o.emptyDirSync(t.folder);const c=t.camelCase&&t.camelCase===!0;function x(e){switch(e.split("(")[0]){case"date":case"datetime":case"timestamp":case"time":case"year":case"char":case"varchar":case"tinytext":case"text":case"mediumtext":case"longtext":case"json":case"decimal":return"schema.string";case"tinyint":case"smallint":case"mediumint":case"int":case"bigint":case"float":case"double":return"schema.number";case"enum":return"schema.enum"}}async function w(e){const n=h({client:"mysql2",connection:{host:e.host,port:e.port,user:e.user,password:e.password,database:e.database}});let a=(await n.raw("SELECT table_name FROM information_schema.tables WHERE table_schema = ?",[e.database]))[0].map(s=>s.table_name).filter(s=>!s.startsWith("knex_")).sort();e.tables&&e.tables.length&&(a=a.filter(s=>e.tables.includes(s))),e.ignore&&e.ignore.length&&(a=a.filter(s=>!e.ignore.includes(s)));for(let s of a){const p=(await n.raw(`DESC ${s}`))[0];c&&(s=d(s));let r=`import { schema } from '@ioc:Adonis/Core/Validator'

export const ${c?`${s}Schema`:`${s}_schema`} = {`;for(const i of p){const b=c?d(i.Field):i.Field,y=x(i.Type);r=`${r}
  ${b}: ${y},`}r=`${r}
}
`;const f=e.folder&&e.folder!==""?e.folder:".",u=e.suffix&&e.suffix!==""?`${s}.${e.suffix}.ts`:`${s}.ts`,l=m.join(f,u);console.log("Created:",l),o.outputFileSync(l,r)}await n.destroy()}(async()=>await w(t))();
